# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `pp` gem.
# Please instead update this file by running `bin/tapioca gem pp`.


class Array
  include ::Enumerable

  # source://pp//lib/pp.rb#402
  def pretty_print(q); end

  # source://pp//lib/pp.rb#410
  def pretty_print_cycle(q); end
end

class Data
  # source://pp//lib/pp.rb#456
  def pretty_print(q); end

  # source://pp//lib/pp.rb#484
  def pretty_print_cycle(q); end
end

class File::Stat
  include ::Comparable

  # source://pp//lib/pp.rb#518
  def pretty_print(q); end
end

class Hash
  include ::Enumerable

  # source://pp//lib/pp.rb#416
  def pretty_print(q); end

  # source://pp//lib/pp.rb#420
  def pretty_print_cycle(q); end
end

module Kernel
  # source://pp//lib/pp.rb#685
  def pretty_inspect; end

  private

  # source://pp//lib/pp.rb#692
  def pp(*objs); end

  class << self
    # source://pp//lib/pp.rb#692
    def pp(*objs); end
  end
end

class MatchData
  # source://pp//lib/pp.rb#601
  def pretty_print(q); end
end

class PP < ::PrettyPrint
  include ::PP::PPMethods

  class << self
    # source://pp//lib/pp.rb#116
    def mcall(obj, mod, meth, *args, &block); end

    # source://pp//lib/pp.rb#96
    def pp(obj, out = T.unsafe(nil), width = T.unsafe(nil)); end

    # source://pp//lib/pp.rb#125
    def sharing_detection; end

    # source://pp//lib/pp.rb#129
    def sharing_detection=(b); end

    # source://pp//lib/pp.rb#108
    def singleline_pp(obj, out = T.unsafe(nil)); end

    # source://pp//lib/pp.rb#79
    def width_for(out); end
  end
end

module PP::ObjectMixin
  # source://pp//lib/pp.rb#353
  def pretty_print(q); end

  # source://pp//lib/pp.rb#370
  def pretty_print_cycle(q); end

  # source://pp//lib/pp.rb#392
  def pretty_print_inspect; end

  # source://pp//lib/pp.rb#381
  def pretty_print_instance_variables; end
end

module PP::PPMethods
  # source://pp//lib/pp.rb#169
  def check_inspect_key(id); end

  # source://pp//lib/pp.rb#232
  def comma_breakable; end

  # source://pp//lib/pp.rb#147
  def guard_inspect_key; end

  # source://pp//lib/pp.rb#222
  def object_address_group(obj, &block); end

  # source://pp//lib/pp.rb#216
  def object_group(obj, &block); end

  # source://pp//lib/pp.rb#182
  def pop_inspect_key(id); end

  # source://pp//lib/pp.rb#191
  def pp(obj); end

  # source://pp//lib/pp.rb#291
  def pp_hash(obj); end

  # source://pp//lib/pp.rb#322
  def pp_hash_pair(k, v); end

  # source://pp//lib/pp.rb#275
  def pp_object(obj); end

  # source://pp//lib/pp.rb#177
  def push_inspect_key(id); end

  # source://pp//lib/pp.rb#261
  def seplist(list, sep = T.unsafe(nil), iter_method = T.unsafe(nil)); end
end

class PP::SingleLine < ::PrettyPrint::SingleLine
  include ::PP::PPMethods
end

# source://pp//lib/pp.rb#67
PP::VERSION = T.let(T.unsafe(nil), String)

class Range
  include ::Enumerable

  # source://pp//lib/pp.rb#490
  def pretty_print(q); end
end

class RubyVM::AbstractSyntaxTree::Node
  # source://pp//lib/pp.rb#640
  def pretty_print(q); end

  # source://pp//lib/pp.rb#627
  def pretty_print_children(q, names = T.unsafe(nil)); end
end

class String
  include ::Comparable

  # source://pp//lib/pp.rb#502
  def pretty_print(q); end
end

class Struct
  include ::Enumerable

  # source://pp//lib/pp.rb#436
  def pretty_print(q); end

  # source://pp//lib/pp.rb#450
  def pretty_print_cycle(q); end
end
