# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rspec-mocks` gem.
# Please instead update this file by running `bin/tapioca gem rspec-mocks`.


# Share the top-level RSpec namespace, because we are a core supported
# extension.
#
# source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#6
module RSpec
  class << self
    # source://rspec-core/3.13.0/lib/rspec/core.rb#70
    def clear_examples; end

    # source://rspec-core/3.13.0/lib/rspec/core.rb#85
    def configuration; end

    # source://rspec-core/3.13.0/lib/rspec/core.rb#49
    def configuration=(_arg0); end

    # source://rspec-core/3.13.0/lib/rspec/core.rb#97
    def configure; end

    # source://rspec-core/3.13.0/lib/rspec/core.rb#194
    def const_missing(name); end

    # source://rspec-core/3.13.0/lib/rspec/core/dsl.rb#42
    def context(*args, &example_group_block); end

    # source://rspec-core/3.13.0/lib/rspec/core.rb#122
    def current_example; end

    # source://rspec-core/3.13.0/lib/rspec/core.rb#128
    def current_example=(example); end

    # source://rspec-core/3.13.0/lib/rspec/core.rb#154
    def current_scope; end

    # source://rspec-core/3.13.0/lib/rspec/core.rb#134
    def current_scope=(scope); end

    # source://rspec-core/3.13.0/lib/rspec/core/dsl.rb#42
    def describe(*args, &example_group_block); end

    # source://rspec-core/3.13.0/lib/rspec/core/dsl.rb#42
    def example_group(*args, &example_group_block); end

    # source://rspec-core/3.13.0/lib/rspec/core/dsl.rb#42
    def fcontext(*args, &example_group_block); end

    # source://rspec-core/3.13.0/lib/rspec/core/dsl.rb#42
    def fdescribe(*args, &example_group_block); end

    # source://rspec-core/3.13.0/lib/rspec/core.rb#58
    def reset; end

    # source://rspec-core/3.13.0/lib/rspec/core/shared_example_group.rb#110
    def shared_context(name, *args, &block); end

    # source://rspec-core/3.13.0/lib/rspec/core/shared_example_group.rb#110
    def shared_examples(name, *args, &block); end

    # source://rspec-core/3.13.0/lib/rspec/core/shared_example_group.rb#110
    def shared_examples_for(name, *args, &block); end

    # source://rspec-core/3.13.0/lib/rspec/core.rb#160
    def world; end

    # source://rspec-core/3.13.0/lib/rspec/core.rb#49
    def world=(_arg0); end

    # source://rspec-core/3.13.0/lib/rspec/core/dsl.rb#42
    def xcontext(*args, &example_group_block); end

    # source://rspec-core/3.13.0/lib/rspec/core/dsl.rb#42
    def xdescribe(*args, &example_group_block); end
  end
end

# Contains top-level utility methods. While this contains a few
# public methods, these are not generally meant to be called from
# a test or example. They exist primarily for integration with
# test frameworks (such as rspec-core).
#
# source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#7
module RSpec::Mocks; end

# Wrapper for matching arguments against a list of expected values. Used by
# the `with` method on a `MessageExpectation`:
#
#     expect(object).to receive(:message).with(:a, 'b', 3)
#     object.message(:a, 'b', 3)
#
# Values passed to `with` can be literal values or argument matchers that
# match against the real objects .e.g.
#
#     expect(object).to receive(:message).with(hash_including(:a => 'b'))
#
# Can also be used directly to match the contents of any `Array`. This
# enables 3rd party mocking libs to take advantage of rspec's argument
# matching without using the rest of rspec-mocks.
#
#     require 'rspec/mocks/argument_list_matcher'
#     include RSpec::Mocks::ArgumentMatchers
#
#     arg_list_matcher = RSpec::Mocks::ArgumentListMatcher.new(123, hash_including(:a => 'b'))
#     arg_list_matcher.args_match?(123, :a => 'b')
#
# This class is immutable.
#
# @see ArgumentMatchers
#
# source://rspec-mocks//lib/rspec/mocks/argument_list_matcher.rb#33
class RSpec::Mocks::ArgumentListMatcher
  # Initializes an `ArgumentListMatcher` with a collection of literal
  # values and/or argument matchers.
  #
  # @api public
  # @param expected_args [Array] a list of expected literals and/or argument matchers
  # @return [ArgumentListMatcher] a new instance of ArgumentListMatcher
  # @see ArgumentMatchers
  # @see #args_match?
  #
  # source://rspec-mocks//lib/rspec/mocks/argument_list_matcher.rb#45
  def initialize(*expected_args, **_arg1); end

  # Matches each element in the `expected_args` against the element in the same
  # position of the arguments passed to `new`.
  #
  # @api public
  # @param actual_args [Array]
  # @return [Boolean]
  # @see #initialize
  #
  # source://rspec-mocks//lib/rspec/mocks/argument_list_matcher.rb#58
  def args_match?(*actual_args, **_arg1); end

  # @private
  #
  # source://rspec-mocks//lib/rspec/mocks/argument_list_matcher.rb#35
  def expected_args; end

  # Resolves abstract arg placeholders like `no_args` and `any_args` into
  # a more concrete arg list based on the provided `actual_args`.
  #
  # @private
  #
  # source://rspec-mocks//lib/rspec/mocks/argument_list_matcher.rb#81
  def resolve_expected_args_based_on(actual_args); end

  private

  # source://rspec-mocks//lib/rspec/mocks/argument_list_matcher.rb#100
  def ensure_expected_args_valid!; end

  # source://rspec-mocks//lib/rspec/mocks/argument_list_matcher.rb#92
  def replace_any_args_with_splat_of_anything(before_count, actual_args_count); end
end

# Value that will match all argument lists.
#
# @private
#
# source://rspec-mocks//lib/rspec/mocks/argument_list_matcher.rb#114
RSpec::Mocks::ArgumentListMatcher::MATCH_ALL = T.let(T.unsafe(nil), RSpec::Mocks::ArgumentListMatcher)

# ArgumentMatchers are placeholders that you can include in message
# expectations to match arguments against a broader check than simple
# equality.
#
# With the exception of `any_args` and `no_args`, they all match against
# the arg in same position in the argument list.
#
# @see ArgumentListMatcher
#
# source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#16
module RSpec::Mocks::ArgumentMatchers
  # Matches if `arg.kind_of?(klass)`
  #
  # @example
  #   expect(object).to receive(:message).with(kind_of(Thing))
  #
  # source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#121
  def a_kind_of(klass); end

  # Matches if `arg.instance_of?(klass)`
  #
  # @example
  #   expect(object).to receive(:message).with(instance_of(Thing))
  #
  # source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#111
  def an_instance_of(klass); end

  # Acts like an arg splat, matching any number of args at any point in an arg list.
  #
  # @example
  #   expect(object).to receive(:message).with(1, 2, any_args)
  #
  #   # matches any of these:
  #   object.message(1, 2)
  #   object.message(1, 2, 3)
  #   object.message(1, 2, 3, 4)
  #
  # source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#26
  def any_args; end

  # Matches any argument at all.
  #
  # @example
  #   expect(object).to receive(:message).with(anything)
  #
  # source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#34
  def anything; end

  # Matches an array that excludes the specified items.
  #
  # @example
  #   expect(object).to receive(:message).with(array_excluding(1,2,3))
  #   expect(object).to receive(:message).with(array_excluding([1,2,3]))
  #
  # source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#100
  def array_excluding(*args); end

  # Matches an array that includes the specified items at least once.
  # Ignores duplicates and additional values
  #
  # @example
  #   expect(object).to receive(:message).with(array_including(1,2,3))
  #   expect(object).to receive(:message).with(array_including([1,2,3]))
  #
  # source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#90
  def array_including(*args); end

  # Matches a boolean value.
  #
  # @example
  #   expect(object).to receive(:message).with(boolean())
  #
  # source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#59
  def boolean; end

  # Matches if the actual argument responds to the specified messages.
  #
  # @example
  #   expect(object).to receive(:message).with(duck_type(:hello))
  #   expect(object).to receive(:message).with(duck_type(:hello, :goodbye))
  #
  # source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#51
  def duck_type(*args); end

  # Matches a hash that doesn't include the specified key(s) or key/value.
  #
  # @example
  #   expect(object).to receive(:message).with(hash_excluding(:key => val))
  #   expect(object).to receive(:message).with(hash_excluding(:key))
  #   expect(object).to receive(:message).with(hash_excluding(:key, :key2 => :val2))
  #
  # source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#80
  def hash_excluding(*args); end

  # Matches a hash that includes the specified key(s) or key/value pairs.
  # Ignores any additional keys.
  #
  # @example
  #   expect(object).to receive(:message).with(hash_including(:key => val))
  #   expect(object).to receive(:message).with(hash_including(:key))
  #   expect(object).to receive(:message).with(hash_including(:key, :key2 => val2))
  #
  # source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#70
  def hash_including(*args); end

  # Matches a hash that doesn't include the specified key(s) or key/value.
  #
  # @example
  #   expect(object).to receive(:message).with(hash_excluding(:key => val))
  #   expect(object).to receive(:message).with(hash_excluding(:key))
  #   expect(object).to receive(:message).with(hash_excluding(:key, :key2 => :val2))
  #
  # source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#80
  def hash_not_including(*args); end

  # Matches if `arg.instance_of?(klass)`
  #
  # @example
  #   expect(object).to receive(:message).with(instance_of(Thing))
  #
  # source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#111
  def instance_of(klass); end

  # Matches if `arg.kind_of?(klass)`
  #
  # @example
  #   expect(object).to receive(:message).with(kind_of(Thing))
  #
  # source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#121
  def kind_of(klass); end

  # Matches no arguments.
  #
  # @example
  #   expect(object).to receive(:message).with(no_args)
  #
  # source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#42
  def no_args; end

  class << self
    # @private
    #
    # source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#128
    def anythingize_lonely_keys(*args); end
  end
end

# @private
#
# source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#159
class RSpec::Mocks::ArgumentMatchers::AnyArgMatcher < ::RSpec::Mocks::ArgumentMatchers::SingletonMatcher
  # source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#160
  def ===(_other); end

  # source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#164
  def description; end
end

# source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#147
RSpec::Mocks::ArgumentMatchers::AnyArgMatcher::INSTANCE = T.let(T.unsafe(nil), RSpec::Mocks::ArgumentMatchers::AnyArgMatcher)

# @private
#
# source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#152
class RSpec::Mocks::ArgumentMatchers::AnyArgsMatcher < ::RSpec::Mocks::ArgumentMatchers::SingletonMatcher
  # source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#153
  def description; end
end

# source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#147
RSpec::Mocks::ArgumentMatchers::AnyArgsMatcher::INSTANCE = T.let(T.unsafe(nil), RSpec::Mocks::ArgumentMatchers::AnyArgsMatcher)

# @private
#
# source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#274
class RSpec::Mocks::ArgumentMatchers::ArrayExcludingMatcher
  # @return [ArrayExcludingMatcher] a new instance of ArrayExcludingMatcher
  #
  # source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#275
  def initialize(unexpected); end

  # source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#279
  def ===(actual); end

  # source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#292
  def description; end

  private

  # source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#298
  def formatted_unexpected_values; end
end

# @private
#
# source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#242
class RSpec::Mocks::ArgumentMatchers::ArrayIncludingMatcher
  # @return [ArrayIncludingMatcher] a new instance of ArrayIncludingMatcher
  #
  # source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#243
  def initialize(expected); end

  # source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#247
  def ===(actual); end

  # source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#260
  def description; end

  private

  # source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#266
  def formatted_expected_values; end
end

# @private
#
# source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#188
class RSpec::Mocks::ArgumentMatchers::BaseHashMatcher
  # @return [BaseHashMatcher] a new instance of BaseHashMatcher
  #
  # source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#189
  def initialize(expected); end

  # source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#193
  def ===(predicate, actual); end

  # source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#201
  def description(name); end

  private

  # source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#207
  def formatted_expected_hash; end
end

# @private
#
# source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#177
class RSpec::Mocks::ArgumentMatchers::BooleanMatcher < ::RSpec::Mocks::ArgumentMatchers::SingletonMatcher
  # source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#178
  def ===(value); end

  # source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#182
  def description; end
end

# source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#147
RSpec::Mocks::ArgumentMatchers::BooleanMatcher::INSTANCE = T.let(T.unsafe(nil), RSpec::Mocks::ArgumentMatchers::BooleanMatcher)

# @private
#
# source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#306
class RSpec::Mocks::ArgumentMatchers::DuckTypeMatcher
  # @return [DuckTypeMatcher] a new instance of DuckTypeMatcher
  #
  # source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#307
  def initialize(*methods_to_respond_to); end

  # source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#311
  def ===(value); end

  # source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#315
  def description; end
end

# @private
#
# source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#231
class RSpec::Mocks::ArgumentMatchers::HashExcludingMatcher < ::RSpec::Mocks::ArgumentMatchers::BaseHashMatcher
  # source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#232
  def ===(actual); end

  # source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#236
  def description; end
end

# @private
#
# source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#220
class RSpec::Mocks::ArgumentMatchers::HashIncludingMatcher < ::RSpec::Mocks::ArgumentMatchers::BaseHashMatcher
  # source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#221
  def ===(actual); end

  # source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#225
  def description; end
end

# @private
#
# source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#321
class RSpec::Mocks::ArgumentMatchers::InstanceOf
  # @return [InstanceOf] a new instance of InstanceOf
  #
  # source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#322
  def initialize(klass); end

  # source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#326
  def ===(actual); end

  # source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#330
  def description; end
end

# @private
#
# source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#336
class RSpec::Mocks::ArgumentMatchers::KindOf
  # @return [KindOf] a new instance of KindOf
  #
  # source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#337
  def initialize(klass); end

  # source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#341
  def ===(actual); end

  # source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#345
  def description; end
end

# @private
#
# source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#170
class RSpec::Mocks::ArgumentMatchers::NoArgsMatcher < ::RSpec::Mocks::ArgumentMatchers::SingletonMatcher
  # source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#171
  def description; end
end

# source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#147
RSpec::Mocks::ArgumentMatchers::NoArgsMatcher::INSTANCE = T.let(T.unsafe(nil), RSpec::Mocks::ArgumentMatchers::NoArgsMatcher)

# Intended to be subclassed by stateless, immutable argument matchers.
# Provides a `<klass name>::INSTANCE` constant for accessing a global
# singleton instance of the matcher. There is no need to construct
# multiple instance since there is no state. It also facilities the
# special case logic we need for some of these matchers, by making it
# easy to do comparisons like: `[klass::INSTANCE] == args` rather than
# `args.count == 1 && klass === args.first`.
#
# @private
#
# source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#143
class RSpec::Mocks::ArgumentMatchers::SingletonMatcher
  class << self
    # @private
    #
    # source://rspec-mocks//lib/rspec/mocks/argument_matchers.rb#146
    def inherited(subklass); end
  end
end
