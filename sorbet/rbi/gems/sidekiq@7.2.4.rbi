# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `sidekiq` gem.
# Please instead update this file by running `bin/tapioca gem sidekiq`.


# source://sidekiq//lib/sidekiq/version.rb#3
module Sidekiq
  class << self
    # source://sidekiq//lib/sidekiq.rb#134
    def configure_client; end

    # source://sidekiq//lib/sidekiq.rb#122
    def configure_embed(&block); end

    # source://sidekiq//lib/sidekiq.rb#96
    def configure_server(&block); end

    # source://sidekiq//lib/sidekiq.rb#88
    def default_configuration; end

    # source://sidekiq//lib/sidekiq.rb#84
    def default_job_options; end

    # source://sidekiq//lib/sidekiq.rb#80
    def default_job_options=(hash); end

    # source://sidekiq//lib/sidekiq.rb#56
    def dump_json(object); end

    # source://sidekiq//lib/sidekiq.rb#64
    def ent?; end

    # source://sidekiq//lib/sidekiq.rb#101
    def freeze!; end

    # source://sidekiq//lib/sidekiq.rb#52
    def load_json(string); end

    # source://sidekiq//lib/sidekiq.rb#92
    def logger; end

    # source://sidekiq//lib/sidekiq.rb#60
    def pro?; end

    # source://sidekiq//lib/sidekiq.rb#72
    def redis(&block); end

    # source://sidekiq//lib/sidekiq.rb#68
    def redis_pool; end

    # source://sidekiq//lib/sidekiq.rb#48
    def server?; end

    # source://sidekiq//lib/sidekiq.rb#76
    def strict_args!(mode = T.unsafe(nil)); end

    # source://sidekiq//lib/sidekiq/transaction_aware_client.rb#40
    def transactional_push!; end

    # source://sidekiq//lib/sidekiq.rb#44
    def ❨╯°□°❩╯︵┻━┻; end
  end
end

# source://sidekiq//lib/sidekiq/client.rb#8
class Sidekiq::Client
  include ::Sidekiq::TestingClient
  include ::Sidekiq::JobUtil

  # source://sidekiq//lib/sidekiq/client.rb#45
  def initialize(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/testing.rb#86
  def atomic_push(conn, payloads); end

  # source://sidekiq//lib/sidekiq/client.rb#23
  def middleware(&block); end

  # source://sidekiq//lib/sidekiq/client.rb#86
  def push(item); end

  # source://sidekiq//lib/sidekiq/client.rb#116
  def push_bulk(items); end

  # source://sidekiq//lib/sidekiq/client.rb#31
  def redis_pool; end

  # source://sidekiq//lib/sidekiq/client.rb#31
  def redis_pool=(_arg0); end

  private

  # source://sidekiq//lib/sidekiq/client.rb#224
  def raw_push(payloads); end

  class << self
    # source://sidekiq//lib/sidekiq/client.rb#189
    def enqueue(klass, *args); end

    # source://sidekiq//lib/sidekiq/client.rb#217
    def enqueue_in(interval, klass, *args); end

    # source://sidekiq//lib/sidekiq/client.rb#196
    def enqueue_to(queue, klass, *args); end

    # source://sidekiq//lib/sidekiq/client.rb#203
    def enqueue_to_in(queue, interval, klass, *args); end

    # source://sidekiq//lib/sidekiq/client.rb#173
    def push(item); end

    # source://sidekiq//lib/sidekiq/client.rb#177
    def push_bulk(*_arg0, **_arg1, &_arg2); end

    # source://sidekiq//lib/sidekiq/client.rb#163
    def via(pool); end
  end
end

# source://sidekiq//lib/sidekiq/middleware/modules.rb#20
Sidekiq::ClientMiddleware = Sidekiq::ServerMiddleware

# source://sidekiq//lib/sidekiq/config.rb#8
class Sidekiq::Config
  extend ::Forwardable

  # source://sidekiq//lib/sidekiq/config.rb#47
  def initialize(options = T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def [](*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def []=(*args, **_arg1, &block); end

  # source://sidekiq//lib/sidekiq/config.rb#212
  def average_scheduled_poll_interval=(interval); end

  # source://sidekiq//lib/sidekiq/config.rb#111
  def capsule(name); end

  # source://sidekiq//lib/sidekiq/config.rb#56
  def capsules; end

  # source://sidekiq//lib/sidekiq/config.rb#94
  def client_middleware; end

  # source://sidekiq//lib/sidekiq/config.rb#68
  def concurrency; end

  # source://sidekiq//lib/sidekiq/config.rb#64
  def concurrency=(val); end

  # source://sidekiq//lib/sidekiq/config.rb#203
  def death_handlers; end

  # source://sidekiq//lib/sidekiq/config.rb#106
  def default_capsule(&block); end

  # source://sidekiq//lib/sidekiq/config.rb#223
  def error_handlers; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def fetch(*args, **_arg1, &block); end

  # source://sidekiq//lib/sidekiq/config.rb#267
  def handle_exception(ex, ctx = T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def has_key?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def key?(*args, **_arg1, &block); end

  # source://sidekiq//lib/sidekiq/config.rb#241
  def logger; end

  # source://sidekiq//lib/sidekiq/config.rb#252
  def logger=(logger); end

  # source://sidekiq//lib/sidekiq/config.rb#186
  def lookup(name, default_class = T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def merge!(*args, **_arg1, &block); end

  # source://sidekiq//lib/sidekiq/config.rb#136
  def new_redis_pool(size, name = T.unsafe(nil)); end

  # source://sidekiq//lib/sidekiq/config.rb#235
  def on(event, &block); end

  # source://sidekiq//lib/sidekiq/config.rb#90
  def queues; end

  # source://sidekiq//lib/sidekiq/config.rb#86
  def queues=(val); end

  # source://sidekiq//lib/sidekiq/config.rb#158
  def redis; end

  # source://sidekiq//lib/sidekiq/config.rb#122
  def redis=(hash); end

  # source://sidekiq//lib/sidekiq/config.rb#142
  def redis_info; end

  # source://sidekiq//lib/sidekiq/config.rb#126
  def redis_pool; end

  # source://sidekiq//lib/sidekiq/config.rb#181
  def register(name, instance); end

  # source://sidekiq//lib/sidekiq/config.rb#100
  def server_middleware; end

  # source://sidekiq//lib/sidekiq/config.rb#58
  def to_json(*_arg0); end

  # source://sidekiq//lib/sidekiq/config.rb#72
  def total_concurrency; end

  private

  # source://sidekiq//lib/sidekiq/config.rb#130
  def local_redis_pool; end

  # source://sidekiq//lib/sidekiq/config.rb#261
  def parameter_size(handler); end
end

# source://sidekiq//lib/sidekiq/config.rb#11
Sidekiq::Config::DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://sidekiq//lib/sidekiq/config.rb#37
Sidekiq::Config::ERROR_HANDLER = T.let(T.unsafe(nil), Proc)

# source://sidekiq//lib/sidekiq/logger.rb#7
module Sidekiq::Context
  class << self
    # source://sidekiq//lib/sidekiq/logger.rb#20
    def add(k, v); end

    # source://sidekiq//lib/sidekiq/logger.rb#16
    def current; end

    # source://sidekiq//lib/sidekiq/logger.rb#8
    def with(hash); end
  end
end

# source://sidekiq//lib/sidekiq/testing.rb#83
class Sidekiq::EmptyQueueError < ::RuntimeError; end

# source://sidekiq//lib/sidekiq/job.rb#44
module Sidekiq::Job
  include ::Sidekiq::Job::Options

  mixes_in_class_methods ::Sidekiq::Job::Options::ClassMethods
  mixes_in_class_methods ::Sidekiq::Job::ClassMethods

  # source://sidekiq//lib/sidekiq/job.rb#156
  def jid; end

  # source://sidekiq//lib/sidekiq/job.rb#156
  def jid=(_arg0); end

  # source://sidekiq//lib/sidekiq/job.rb#165
  def logger; end

  class << self
    # source://sidekiq//lib/sidekiq/testing.rb#305
    def clear_all; end

    # source://sidekiq//lib/sidekiq/testing.rb#310
    def drain_all; end

    # source://sidekiq//lib/sidekiq/job.rb#158
    def included(base); end

    # source://sidekiq//lib/sidekiq/testing.rb#300
    def jobs; end
  end
end

# source://sidekiq//lib/sidekiq/job.rb#264
module Sidekiq::Job::ClassMethods
  # source://sidekiq//lib/sidekiq/job.rb#367
  def build_client; end

  # source://sidekiq//lib/sidekiq/testing.rb#264
  def clear; end

  # source://sidekiq//lib/sidekiq/job.rb#352
  def client_push(item); end

  # source://rspec-sidekiq/5.0.0/lib/rspec/sidekiq/helpers/within_sidekiq_retries_exhausted_block.rb#18
  def default_retries_exhausted_exception; end

  # source://rspec-sidekiq/5.0.0/lib/rspec/sidekiq/helpers/within_sidekiq_retries_exhausted_block.rb#9
  def default_retries_exhausted_message; end

  # source://sidekiq//lib/sidekiq/job.rb#265
  def delay(*args); end

  # source://sidekiq//lib/sidekiq/job.rb#269
  def delay_for(*args); end

  # source://sidekiq//lib/sidekiq/job.rb#273
  def delay_until(*args); end

  # source://sidekiq//lib/sidekiq/testing.rb#269
  def drain; end

  # source://sidekiq//lib/sidekiq/testing.rb#294
  def execute_job(worker, args); end

  # source://sidekiq//lib/sidekiq/testing.rb#259
  def jobs; end

  # source://sidekiq//lib/sidekiq/job.rb#285
  def perform_async(*args); end

  # source://sidekiq//lib/sidekiq/job.rb#321
  def perform_at(interval, *args); end

  # source://sidekiq//lib/sidekiq/job.rb#315
  def perform_bulk(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/job.rb#321
  def perform_in(interval, *args); end

  # source://sidekiq//lib/sidekiq/job.rb#290
  def perform_inline(*args); end

  # source://sidekiq//lib/sidekiq/testing.rb#278
  def perform_one; end

  # source://sidekiq//lib/sidekiq/job.rb#290
  def perform_sync(*args); end

  # source://sidekiq//lib/sidekiq/testing.rb#285
  def process_job(job); end

  # source://sidekiq//lib/sidekiq/testing.rb#254
  def queue; end

  # source://sidekiq//lib/sidekiq/job.rb#277
  def queue_as(q); end

  # source://sidekiq//lib/sidekiq/job.rb#281
  def set(options); end

  # source://sidekiq//lib/sidekiq/job.rb#348
  def sidekiq_options(opts = T.unsafe(nil)); end

  # source://rspec-sidekiq/5.0.0/lib/rspec/sidekiq/helpers/within_sidekiq_retries_exhausted_block.rb#4
  def within_sidekiq_retries_exhausted_block(user_msg = T.unsafe(nil), exception = T.unsafe(nil), &block); end
end

# source://sidekiq//lib/sidekiq/job.rb#48
module Sidekiq::Job::Options
  mixes_in_class_methods ::Sidekiq::Job::Options::ClassMethods

  class << self
    # source://sidekiq//lib/sidekiq/job.rb#49
    def included(base); end
  end
end

# source://sidekiq//lib/sidekiq/job.rb#56
module Sidekiq::Job::Options::ClassMethods
  # source://sidekiq//lib/sidekiq/job.rb#84
  def get_sidekiq_options; end

  # source://sidekiq//lib/sidekiq/job.rb#88
  def sidekiq_class_attribute(*attrs); end

  # source://sidekiq//lib/sidekiq/job.rb#71
  def sidekiq_options(opts = T.unsafe(nil)); end

  # source://sidekiq//lib/sidekiq/job.rb#80
  def sidekiq_retries_exhausted(&block); end

  # source://sidekiq//lib/sidekiq/job.rb#76
  def sidekiq_retry_in(&block); end
end

# source://sidekiq//lib/sidekiq/job.rb#57
Sidekiq::Job::Options::ClassMethods::ACCESSOR_MUTEX = T.let(T.unsafe(nil), Thread::Mutex)

# source://sidekiq//lib/sidekiq/job.rb#173
class Sidekiq::Job::Setter
  include ::Sidekiq::JobUtil

  # source://sidekiq//lib/sidekiq/job.rb#176
  def initialize(klass, opts); end

  # source://sidekiq//lib/sidekiq/job.rb#194
  def perform_async(*args); end

  # source://sidekiq//lib/sidekiq/job.rb#247
  def perform_at(interval, *args); end

  # source://sidekiq//lib/sidekiq/job.rb#240
  def perform_bulk(args, batch_size: T.unsafe(nil)); end

  # source://sidekiq//lib/sidekiq/job.rb#247
  def perform_in(interval, *args); end

  # source://sidekiq//lib/sidekiq/job.rb#204
  def perform_inline(*args); end

  # source://sidekiq//lib/sidekiq/job.rb#204
  def perform_sync(*args); end

  # source://sidekiq//lib/sidekiq/job.rb#186
  def set(options); end

  private

  # source://sidekiq//lib/sidekiq/job.rb#254
  def at(interval); end
end

# source://sidekiq//lib/sidekiq/job_util.rb#5
module Sidekiq::JobUtil
  # source://sidekiq//lib/sidekiq/job_util.rb#41
  def normalize_item(item); end

  # source://sidekiq//lib/sidekiq/job_util.rb#63
  def normalized_hash(item_class); end

  # source://sidekiq//lib/sidekiq/job_util.rb#10
  def validate(item); end

  # source://sidekiq//lib/sidekiq/job_util.rb#19
  def verify_json(item); end

  private

  # source://sidekiq//lib/sidekiq/job_util.rb#103
  def json_unsafe?(item); end
end

# source://sidekiq//lib/sidekiq/job_util.rb#74
Sidekiq::JobUtil::RECURSIVE_JSON_UNSAFE = T.let(T.unsafe(nil), Hash)

# source://sidekiq//lib/sidekiq/job_util.rb#8
Sidekiq::JobUtil::TRANSIENT_ATTRIBUTES = T.let(T.unsafe(nil), Array)

# source://sidekiq//lib/sidekiq.rb#42
Sidekiq::LICENSE = T.let(T.unsafe(nil), String)

# source://sidekiq//lib/sidekiq/logger.rb#75
class Sidekiq::Logger < ::Logger
  include ::Sidekiq::LoggingUtils
end

# source://sidekiq//lib/sidekiq/logger.rb#78
module Sidekiq::Logger::Formatters; end

# source://sidekiq//lib/sidekiq/logger.rb#79
class Sidekiq::Logger::Formatters::Base < ::Logger::Formatter
  # source://sidekiq//lib/sidekiq/logger.rb#84
  def ctx; end

  # source://sidekiq//lib/sidekiq/logger.rb#88
  def format_context; end

  # source://sidekiq//lib/sidekiq/logger.rb#80
  def tid; end
end

# source://sidekiq//lib/sidekiq/logger.rb#114
class Sidekiq::Logger::Formatters::JSON < ::Sidekiq::Logger::Formatters::Base
  # source://sidekiq//lib/sidekiq/logger.rb#115
  def call(severity, time, program_name, message); end
end

# source://sidekiq//lib/sidekiq/logger.rb#102
class Sidekiq::Logger::Formatters::Pretty < ::Sidekiq::Logger::Formatters::Base
  # source://sidekiq//lib/sidekiq/logger.rb#103
  def call(severity, time, program_name, message); end
end

# source://sidekiq//lib/sidekiq/logger.rb#108
class Sidekiq::Logger::Formatters::WithoutTimestamp < ::Sidekiq::Logger::Formatters::Pretty
  # source://sidekiq//lib/sidekiq/logger.rb#109
  def call(severity, time, program_name, message); end
end

# source://sidekiq//lib/sidekiq/logger.rb#25
module Sidekiq::LoggingUtils
  # source://sidekiq//lib/sidekiq/logger.rb#39
  def debug?; end

  # source://sidekiq//lib/sidekiq/logger.rb#39
  def error?; end

  # source://sidekiq//lib/sidekiq/logger.rb#39
  def fatal?; end

  # source://sidekiq//lib/sidekiq/logger.rb#39
  def info?; end

  # source://sidekiq//lib/sidekiq/logger.rb#61
  def level; end

  # source://sidekiq//lib/sidekiq/logger.rb#44
  def local_level; end

  # source://sidekiq//lib/sidekiq/logger.rb#48
  def local_level=(level); end

  # source://sidekiq//lib/sidekiq/logger.rb#66
  def log_at(level); end

  # source://sidekiq//lib/sidekiq/logger.rb#39
  def warn?; end
end

# source://sidekiq//lib/sidekiq/logger.rb#26
Sidekiq::LoggingUtils::LEVELS = T.let(T.unsafe(nil), Hash)

# source://sidekiq//lib/sidekiq/version.rb#5
Sidekiq::MAJOR = T.let(T.unsafe(nil), Integer)

# source://sidekiq//lib/sidekiq/middleware/chain.rb#79
module Sidekiq::Middleware; end

# source://sidekiq//lib/sidekiq/middleware/chain.rb#80
class Sidekiq::Middleware::Chain
  include ::Enumerable

  # source://sidekiq//lib/sidekiq/middleware/chain.rb#89
  def initialize(config = T.unsafe(nil)); end

  # source://sidekiq//lib/sidekiq/middleware/chain.rb#119
  def add(klass, *args); end

  # source://sidekiq//lib/sidekiq/middleware/chain.rb#163
  def clear; end

  # source://sidekiq//lib/sidekiq/middleware/chain.rb#99
  def copy_for(capsule); end

  # source://sidekiq//lib/sidekiq/middleware/chain.rb#84
  def each(&block); end

  # source://sidekiq//lib/sidekiq/middleware/chain.rb#155
  def empty?; end

  # source://sidekiq//lib/sidekiq/middleware/chain.rb#95
  def entries; end

  # source://sidekiq//lib/sidekiq/middleware/chain.rb#149
  def exists?(klass); end

  # source://sidekiq//lib/sidekiq/middleware/chain.rb#149
  def include?(klass); end

  # source://sidekiq//lib/sidekiq/middleware/chain.rb#141
  def insert_after(oldklass, newklass, *args); end

  # source://sidekiq//lib/sidekiq/middleware/chain.rb#132
  def insert_before(oldklass, newklass, *args); end

  # source://sidekiq//lib/sidekiq/middleware/chain.rb#169
  def invoke(*args, &block); end

  # source://sidekiq//lib/sidekiq/middleware/chain.rb#125
  def prepend(klass, *args); end

  # source://sidekiq//lib/sidekiq/middleware/chain.rb#107
  def remove(klass); end

  # source://sidekiq//lib/sidekiq/middleware/chain.rb#159
  def retrieve; end

  private

  # source://sidekiq//lib/sidekiq/middleware/chain.rb#178
  def traverse(chain, index, args, &block); end
end

# source://sidekiq//lib/sidekiq/middleware/chain.rb#191
class Sidekiq::Middleware::Entry
  # source://sidekiq//lib/sidekiq/middleware/chain.rb#194
  def initialize(config, klass, *args); end

  # source://sidekiq//lib/sidekiq/middleware/chain.rb#192
  def klass; end

  # source://sidekiq//lib/sidekiq/middleware/chain.rb#200
  def make_new; end
end

# source://sidekiq//lib/sidekiq.rb#41
Sidekiq::NAME = T.let(T.unsafe(nil), String)

# source://sidekiq//lib/sidekiq/testing.rb#110
module Sidekiq::Queues
  class << self
    # source://sidekiq//lib/sidekiq/testing.rb#177
    def [](queue); end

    # source://sidekiq//lib/sidekiq/testing.rb#205
    def clear_all; end

    # source://sidekiq//lib/sidekiq/testing.rb#200
    def clear_for(queue, klass); end

    # source://sidekiq//lib/sidekiq/testing.rb#195
    def delete_for(jid, queue, klass); end

    # source://sidekiq//lib/sidekiq/testing.rb#190
    def jobs_by_class; end

    # source://sidekiq//lib/sidekiq/testing.rb#186
    def jobs_by_queue; end

    # source://sidekiq//lib/sidekiq/testing.rb#190
    def jobs_by_worker; end

    # source://sidekiq//lib/sidekiq/testing.rb#181
    def push(queue, klass, job); end
  end
end

# source://sidekiq//lib/sidekiq/rails.rb#7
class Sidekiq::Rails < ::Rails::Engine
  class << self
    private

    # source://activesupport/8.0.2/lib/active_support/class_attribute.rb#15
    def __class_attr___callbacks; end

    # source://activesupport/8.0.2/lib/active_support/class_attribute.rb#17
    def __class_attr___callbacks=(new_value); end
  end
end

# source://sidekiq//lib/sidekiq/rails.rb#8
class Sidekiq::Rails::Reloader
  # source://sidekiq//lib/sidekiq/rails.rb#9
  def initialize(app = T.unsafe(nil)); end

  # source://sidekiq//lib/sidekiq/rails.rb#13
  def call; end

  # source://sidekiq//lib/sidekiq/rails.rb#20
  def inspect; end

  # source://sidekiq//lib/sidekiq/rails.rb#24
  def to_hash; end
end

# source://sidekiq//lib/sidekiq/redis_client_adapter.rb#8
class Sidekiq::RedisClientAdapter
  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#63
  def initialize(options); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#72
  def new_client; end

  private

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#78
  def client_opts(options); end
end

# source://sidekiq//lib/sidekiq/redis_client_adapter.rb#9
Sidekiq::RedisClientAdapter::BaseError = RedisClient::Error

# source://sidekiq//lib/sidekiq/redis_client_adapter.rb#10
Sidekiq::RedisClientAdapter::CommandError = RedisClient::CommandError

# source://sidekiq//lib/sidekiq/redis_client_adapter.rb#0
class Sidekiq::RedisClientAdapter::CompatClient < ::RedisClient::Decorator::Client
  include ::Sidekiq::RedisClientAdapter::CompatMethods

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#58
  def config; end
end

# source://sidekiq//lib/sidekiq/redis_client_adapter.rb#0
class Sidekiq::RedisClientAdapter::CompatClient::Pipeline < ::RedisClient::Decorator::Pipeline
  include ::Sidekiq::RedisClientAdapter::CompatMethods
end

# source://sidekiq//lib/sidekiq/redis_client_adapter.rb#15
module Sidekiq::RedisClientAdapter::CompatMethods
  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#35
  def bitfield(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#35
  def bitfield_ro(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#35
  def del(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#20
  def evalsha(sha, keys, argv); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#35
  def exists(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#35
  def expire(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#35
  def flushdb(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#35
  def get(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#35
  def hdel(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#35
  def hget(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#35
  def hgetall(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#35
  def hincrby(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#35
  def hlen(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#35
  def hmget(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#35
  def hset(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#35
  def hsetnx(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#35
  def incr(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#35
  def incrby(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#16
  def info; end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#35
  def lindex(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#35
  def llen(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#35
  def lmove(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#35
  def lpop(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#35
  def lpush(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#35
  def lrange(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#35
  def lrem(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#35
  def mget(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#35
  def mset(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#35
  def ping(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#35
  def pttl(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#35
  def publish(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#35
  def rpop(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#35
  def rpush(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#35
  def sadd(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#35
  def scard(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#35
  def script(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#35
  def set(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#35
  def sismember(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#35
  def smembers(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#35
  def srem(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#35
  def ttl(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#35
  def type(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#35
  def unlink(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#35
  def zadd(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#35
  def zcard(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#35
  def zincrby(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#35
  def zrange(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#35
  def zrem(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#35
  def zremrangebyrank(*args, **kwargs); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#35
  def zremrangebyscore(*args, **kwargs); end

  private

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#44
  def method_missing(*args, **_arg1, &block); end

  # source://sidekiq//lib/sidekiq/redis_client_adapter.rb#50
  def respond_to_missing?(name, include_private = T.unsafe(nil)); end
end

# source://sidekiq//lib/sidekiq/redis_client_adapter.rb#27
Sidekiq::RedisClientAdapter::CompatMethods::USED_COMMANDS = T.let(T.unsafe(nil), Array)

# source://sidekiq//lib/sidekiq/redis_client_adapter.rb#13
Sidekiq::RedisClientAdapter::DEPRECATED_COMMANDS = T.let(T.unsafe(nil), Set)

# source://sidekiq//lib/sidekiq/redis_connection.rb#8
module Sidekiq::RedisConnection
  class << self
    # source://sidekiq//lib/sidekiq/redis_connection.rb#10
    def create(options = T.unsafe(nil)); end

    private

    # source://sidekiq//lib/sidekiq/redis_connection.rb#50
    def determine_redis_provider; end

    # source://sidekiq//lib/sidekiq/redis_connection.rb#30
    def scrub(options); end
  end
end

# source://sidekiq//lib/sidekiq/middleware/modules.rb#4
module Sidekiq::ServerMiddleware
  # source://sidekiq//lib/sidekiq/middleware/modules.rb#5
  def config; end

  # source://sidekiq//lib/sidekiq/middleware/modules.rb#5
  def config=(_arg0); end

  # source://sidekiq//lib/sidekiq/middleware/modules.rb#10
  def logger; end

  # source://sidekiq//lib/sidekiq/middleware/modules.rb#14
  def redis(&block); end

  # source://sidekiq//lib/sidekiq/middleware/modules.rb#6
  def redis_pool; end
end

# source://sidekiq//lib/sidekiq.rb#144
class Sidekiq::Shutdown < ::Interrupt; end

# source://sidekiq//lib/sidekiq/testing.rb#7
class Sidekiq::Testing
  class << self
    # source://sidekiq//lib/sidekiq/testing.rb#10
    def __global_test_mode; end

    # source://sidekiq//lib/sidekiq/testing.rb#10
    def __global_test_mode=(_arg0); end

    # source://sidekiq//lib/sidekiq/testing.rb#36
    def __local_test_mode; end

    # source://sidekiq//lib/sidekiq/testing.rb#40
    def __local_test_mode=(value); end

    # source://sidekiq//lib/sidekiq/testing.rb#14
    def __set_test_mode(mode); end

    # source://sidekiq//lib/sidekiq/testing.rb#32
    def __test_mode; end

    # source://sidekiq//lib/sidekiq/testing.rb#44
    def disable!(&block); end

    # source://sidekiq//lib/sidekiq/testing.rb#60
    def disabled?; end

    # source://sidekiq//lib/sidekiq/testing.rb#56
    def enabled?; end

    # source://sidekiq//lib/sidekiq/testing.rb#48
    def fake!(&block); end

    # source://sidekiq//lib/sidekiq/testing.rb#64
    def fake?; end

    # source://sidekiq//lib/sidekiq/testing.rb#52
    def inline!(&block); end

    # source://sidekiq//lib/sidekiq/testing.rb#68
    def inline?; end

    # source://sidekiq//lib/sidekiq/testing.rb#72
    def server_middleware; end
  end
end

# source://sidekiq//lib/sidekiq/testing.rb#8
class Sidekiq::Testing::TestModeAlreadySetError < ::RuntimeError; end

# source://sidekiq//lib/sidekiq/testing.rb#85
module Sidekiq::TestingClient
  # source://sidekiq//lib/sidekiq/testing.rb#86
  def atomic_push(conn, payloads); end
end

# source://sidekiq//lib/sidekiq/testing.rb#322
module Sidekiq::TestingExtensions
  # source://sidekiq//lib/sidekiq/testing.rb#323
  def jobs_for(klass); end
end

# source://sidekiq//lib/sidekiq/transaction_aware_client.rb#7
class Sidekiq::TransactionAwareClient
  # source://sidekiq//lib/sidekiq/transaction_aware_client.rb#8
  def initialize(pool: T.unsafe(nil), config: T.unsafe(nil)); end

  # source://sidekiq//lib/sidekiq/transaction_aware_client.rb#12
  def batching?; end

  # source://sidekiq//lib/sidekiq/transaction_aware_client.rb#16
  def push(item); end

  # source://sidekiq//lib/sidekiq/transaction_aware_client.rb#31
  def push_bulk(items); end
end

# source://sidekiq//lib/sidekiq/version.rb#4
Sidekiq::VERSION = T.let(T.unsafe(nil), String)

# source://sidekiq//lib/sidekiq/worker_compatibility_alias.rb#12
Sidekiq::Worker = Sidekiq::Job
